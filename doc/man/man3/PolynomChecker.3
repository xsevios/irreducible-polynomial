.TH "PolynomChecker" 3 "Fri Apr 29 2016" "Irreducible Polynom" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PolynomChecker \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBinit\fP (\fBPolynom\fP *polynom, pthread_mutex_t *mutex, pthread_cond_t *cond)"
.br
.ti -1c
.RI "bool \fBisBusy\fP ()"
.br
.ti -1c
.RI "void \fBfree\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP (\fBMethod\fP method)"
.br
.ti -1c
.RI "void \fBsetPoly\fP (\fBPolynom\fP *polynom, pthread_mutex_t *mutex, pthread_cond_t *cond)"
.br
.ti -1c
.RI "void \fBmatlab\fP ()"
.br
.ti -1c
.RI "void \fBberlekamp\fP ()"
.br
.RI "\fIЧасть алгоритма Берлекэмпа\&. Проверяет многочлен на неприводимость \fP"
.ti -1c
.RI "vector< vector< int > > \fBgenerateMatrix\fP (const \fBPolynom\fP &p)"
.br
.RI "\fICоставляет матрицу для данного многочлена \fP"
.ti -1c
.RI "int \fBgetRank\fP (vector< vector< int >> m, int m_dimGF)"
.br
.RI "\fIУзнаёт ранг матрицы над полем GF(p) \fP"
.ti -1c
.RI "\fBPolynomState\fP \fBcheckMatrix\fP (const \fBPolynom\fP &p)"
.br
.RI "\fIПроверяет, является ли ранг матрицы r для данного полинома степени n таким, что n - r = 1\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void * \fBcheck\fP (void *arg)"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "void PolynomChecker::berlekamp ()"

.PP
Часть алгоритма Берлекэмпа\&. Проверяет многочлен на неприводимость Описание алгоритма: Дан многочлен f(x) степени n над полем GF(p)\&. Необходимо узнать является ли он неприводимым\&.
.IP "1." 4
Нормируем многочлен, то есть умножаем его на обратный элемент коэффициента при максимальной степени\&.
.IP "2." 4
Находим производную f'(x)полученного многочлена\&. Если производная оказалась равна 0, то многочлен является степенью какого-то другого многочлена, то есть он приводим\&. В противном случае продолжаем алгоритм\&.
.IP "3." 4
Вычисляем НОД(f(x), f'(x))\&. Если НОД оказался многочленом, то, очевидно, f(x) делится на него, то есть f(x) приводим\&. Если НОД - число, то продолжаем\&.
.IP "4." 4
Строим матрицу B размером n x n: Элементами матрицы B являются коэффициенты многочленов вида x^(ip) по модулю f(x), где i = 0, 1, \&.\&.\&. , n-1\&. Таким образом, первый многочлен - x^0 = 1, то есть первая строка выглядит как [1, 0, \&.\&.\&., 0] (n-1 нулей)\&. Второй многочлен имеет вид x^p mod(f(x))\&. Если n>p, то это будет строка [0, \&.\&.\&., 0, 1, 0, \&.\&.\&., 0], где 1 стоит на p-м месте\&. В противном случае находится остаток от деления x^p на f(x)\&. Аналогично находятся все последующие строки B\&.
.IP "5." 4
Вычитаем из матрицы B единичную матрицу C=B-E\&.
.IP "6." 4
Находим ранг матрицы C\&. Если ранг этой матрицы r такой, что n - r = 1, то многочлен неприводим\&. В противном случае он приводим\&. 
.PP
< Нормировка многочлена
.PP
< polyDer -- производная проверяемого многочлена
.PP
< firstCheck -- НОД(f(x), f'(x))
.PP
< checkMatrix составляет матрицу и проверяет её ранг для данного многочлена 
.SS "vector< vector< int > > PolynomChecker::generateMatrix (const \fBPolynom\fP & p)"

.PP
Cоставляет матрицу для данного многочлена Для того, чтобы избежать большого (близкого к n) количества делений, используется следующий алгоритм: Сначала в матрицу записываются коэффициенты всех многочленов вида x^(ip), для которых ip < n\&. Далее находится x^n mod(f(x))\&. Пусть он имеет вид a_0 + a_1*x + \&.\&.\&. + a_(n - 1)*x^(n - 1)\&. Тогда многочлен x^(n + 1) mod(f(x)) будет иметь вид a_0*x + a_1*x^2 + \&.\&.\&. + a_(n - 1)*x^n\&. Однако, x^n mod(f(x)) уже известен, поэтому x^(n + 1) mod(f(x)) имеет вид b_0 + b_1*x + \&.\&.\&. + b_(n - 1)*x^(n - 1), где b_0 = a_0*a_(n - 1), b_1 = a_1*a_(n - 1) + a_0, и т\&.д\&. В матрицу записываются коэффициенты многочленов, степень которых равна ip, i = 0, 1, \&.\&.\&. , n-1\&. Добавление в матрицу строк для многочленов, у которых ip < n\&.
.PP
Построение многочлена x^n
.PP
< Коэффициенты многочлена x^n mod(f(x))
.PP
Добавление в матрицу строки для многочлена, у которого ip = n
.PP
Добавление в матрицу строк для многочленов, у которых ip > n\&.
.PP
Вычитает из полученной матрицы единичную 
.SS "int PolynomChecker::getRank (vector< vector< int >> m, int m_dimGF)"

.PP
Узнаёт ранг матрицы над полем GF(p) Ранг равен количеству ненулевых строк в матрице после прямого хода метода Гаусса\&. 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP Матрица, ранг которой надо узнать 
.br
\fIdimGF\fP Характеристика поля GF(p) 
.RE
.PP

.SS "void PolynomChecker::matlab ()"
Проверяет, является ли многочлен из класса \fBPolynom\fP неприводимым на нерасширенном поле Галуа\&. 
.PP
\fBReturns:\fP
.RS 4
polynom->setIrreducible присваивается значение REDUCIBLE или IRREDUCIBLE, что соответствует приводимости или неприводимости многочлена\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Irreducible Polynom from the source code\&.
